{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\react-medicine\\\\src\\\\Components\\\\store\\\\MedicineProvider.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport MedicineContext from \"./medcine-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MedicineProvider = props => {\n  _s();\n  const [medicines, updatedMedicines] = useState([]);\n  const api = 'https://crudcrud.com/api/04e03612b4474a0d8401297de71a1ab0/medicine';\n  const getMedicines = async () => {\n    try {\n      const response = await axios.get(`${api}`);\n      updatedMedicines(response.data);\n    } catch (error) {\n      console.error(\"Error retrieving medicine items:\", error);\n    }\n  };\n  useEffect(() => {\n    const storedMedicines = localStorage.getItem(\"medicines\");\n    if (storedMedicines) {\n      updatedMedicines(JSON.parse(storedMedicines));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"medicines\", JSON.stringify(medicines));\n  }, [medicines]);\n  const addMedicineHandler = async item => {\n    const updatedMedicinesArray = [...medicines];\n    let url = `${api}`;\n    const existingItemIndex = updatedMedicinesArray.findIndex(existingItem => existingItem._id === item.id);\n    if (existingItemIndex !== -1) {\n      updatedMedicinesArray[existingItemIndex].amount += Number(item.amount);\n      try {\n        const itemIdToUpdate = updatedMedicinesArray[existingItemIndex]._id;\n        const updatedItem = {\n          name: item.name,\n          description: item.description,\n          price: item.price,\n          quantity: updatedMedicinesArray[existingItemIndex].quantity\n        };\n        await axios.put(`${url}/${itemIdToUpdate}`, updatedItem);\n        console.log(url);\n        console.log(itemIdToUpdate);\n      } catch (error) {\n        console.error(\"Error updating item:\", error);\n      }\n    } else {\n      try {\n        const res = await axios.post(url, item);\n        updatedMedicinesArray.push(res.data);\n      } catch (error) {\n        console.error(\"Error adding item:\", error);\n      }\n    }\n    updatedMedicines(updatedMedicinesArray);\n  };\n  const removeMedicineHandler = async id => {\n    const itemIndex = medicines.findIndex(item => item._id === id);\n    const existingItem = medicines[itemIndex];\n    console.log(existingItem);\n    if (itemIndex !== -1) {\n      const updatedMedicinesArray = [...medicines];\n      if (existingItem.quantity > 1) {\n        updatedMedicinesArray[itemIndex].quantity -= 1;\n        const updatedItem = {\n          name: existingItem.name,\n          description: existingItem.description,\n          price: existingItem.price,\n          quantity: updatedMedicinesArray[itemIndex].quantity\n        };\n        try {\n          const url = `${api}`;\n          await axios.put(`${url}/${id}`, updatedItem);\n          console.log(url);\n          updatedMedicines(updatedMedicinesArray);\n        } catch (error) {\n          console.error(\"Error removing item:\", error);\n        }\n      } else {\n        updatedMedicinesArray.splice(itemIndex, 1);\n        try {\n          const url = `${api}/${id}`;\n          await axios.delete(url);\n          console.log(url);\n          updatedMedicines(updatedMedicinesArray);\n        } catch (error) {\n          console.error(\"Error removing item:\", error);\n        }\n      }\n    }\n  };\n  const medicineContext = {\n    medicines: medicines,\n    addItem: addMedicineHandler,\n    removeItem: removeMedicineHandler\n  };\n  return /*#__PURE__*/_jsxDEV(MedicineContext.Provider, {\n    value: medicineContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(MedicineProvider, \"Hu08VFDM3ax5rmrwn32QDGc24ik=\");\n_c = MedicineProvider;\nexport default MedicineProvider;\nvar _c;\n$RefreshReg$(_c, \"MedicineProvider\");","map":{"version":3,"names":["useContext","useEffect","useState","axios","MedicineContext","jsxDEV","_jsxDEV","MedicineProvider","props","_s","medicines","updatedMedicines","api","getMedicines","response","get","data","error","console","storedMedicines","localStorage","getItem","JSON","parse","setItem","stringify","addMedicineHandler","item","updatedMedicinesArray","url","existingItemIndex","findIndex","existingItem","_id","id","amount","Number","itemIdToUpdate","updatedItem","name","description","price","quantity","put","log","res","post","push","removeMedicineHandler","itemIndex","splice","delete","medicineContext","addItem","removeItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React/react-medicine/src/Components/store/MedicineProvider.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport MedicineContext from \"./medcine-context\";\r\n\r\nconst MedicineProvider = (props) => {\r\n  const [medicines, updatedMedicines] = useState([]);\r\n\r\n  const api = 'https://crudcrud.com/api/04e03612b4474a0d8401297de71a1ab0/medicine';\r\n\r\n  const getMedicines = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${api}`\r\n      );\r\n\r\n      updatedMedicines(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error retrieving medicine items:\", error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const storedMedicines = localStorage.getItem(\"medicines\");\r\n    if (storedMedicines) {\r\n      updatedMedicines(JSON.parse(storedMedicines));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"medicines\", JSON.stringify(medicines));\r\n  }, [medicines]);\r\n\r\n  const addMedicineHandler = async (item) => {\r\n    const updatedMedicinesArray = [...medicines];\r\n    let url = `${api}`;\r\n    const existingItemIndex = updatedMedicinesArray.findIndex(\r\n      (existingItem) => existingItem._id === item.id\r\n    );\r\n    if (existingItemIndex !== -1) {\r\n      updatedMedicinesArray[existingItemIndex].amount += Number(item.amount);\r\n\r\n      try {\r\n        const itemIdToUpdate = updatedMedicinesArray[existingItemIndex]._id;\r\n        const updatedItem = {\r\n          name: item.name,\r\n          description: item.description,\r\n          price: item.price,\r\n          quantity: updatedMedicinesArray[existingItemIndex].quantity,\r\n        };\r\n\r\n        await axios.put(`${url}/${itemIdToUpdate}`, updatedItem);\r\n        console.log(url);\r\n        console.log(itemIdToUpdate);\r\n      } catch (error) {\r\n        console.error(\"Error updating item:\", error);\r\n      }\r\n    } else {\r\n      try {\r\n        const res = await axios.post(url, item);\r\n\r\n        updatedMedicinesArray.push(res.data);\r\n      } catch (error) {\r\n        console.error(\"Error adding item:\", error);\r\n      }\r\n    }\r\n\r\n    updatedMedicines(updatedMedicinesArray);\r\n  };\r\n\r\n  const removeMedicineHandler = async (id) => {\r\n    const itemIndex = medicines.findIndex((item) => item._id === id);\r\n    const existingItem = medicines[itemIndex];\r\n    console.log(existingItem);\r\n    if (itemIndex !== -1) {\r\n      const updatedMedicinesArray = [...medicines];\r\n\r\n      if (existingItem.quantity > 1) {\r\n        updatedMedicinesArray[itemIndex].quantity -= 1;\r\n        const updatedItem = {\r\n          name: existingItem.name,\r\n          description: existingItem.description,\r\n          price: existingItem.price,\r\n          quantity: updatedMedicinesArray[itemIndex].quantity,\r\n        };\r\n        try {\r\n          const url = `${api}`;\r\n          await axios.put(`${url}/${id}`, updatedItem);\r\n          console.log(url);\r\n\r\n          updatedMedicines(updatedMedicinesArray);\r\n        } catch (error) {\r\n          console.error(\"Error removing item:\", error);\r\n        }\r\n      } else {\r\n        updatedMedicinesArray.splice(itemIndex, 1);\r\n        try {\r\n          const url = `${api}/${id}`;\r\n          await axios.delete(url);\r\n          console.log(url);\r\n\r\n          updatedMedicines(updatedMedicinesArray);\r\n        } catch (error) {\r\n          console.error(\"Error removing item:\", error);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const medicineContext = {\r\n    medicines: medicines,\r\n    addItem: addMedicineHandler,\r\n    removeItem: removeMedicineHandler,\r\n  };\r\n  return (\r\n    <MedicineContext.Provider value={medicineContext}>\r\n      {props.children}\r\n    </MedicineContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MedicineProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}