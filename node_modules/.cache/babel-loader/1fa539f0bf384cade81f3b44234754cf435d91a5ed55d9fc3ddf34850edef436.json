{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\react-medicine\\\\src\\\\Components\\\\store\\\\CartProvider.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from \"react\";\nimport CartContext from \"./cart-context\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartProvider = props => {\n  _s();\n  const api = 'https://crudcrud.com/api/1da47b9b260445749a0d4bf75d10b6e1/cart';\n  const [items, updatedItems] = useState([]);\n  const getItems = async () => {\n    try {\n      const response = await axios.get(`${api}`);\n      updatedItems(response.data);\n    } catch (error) {\n      console.error(\"Error retrieving cart items:\", error);\n    }\n  };\n  useEffect(() => {\n    const storedItems = localStorage.getItem(\"cartItems\");\n    if (storedItems) {\n      updatedItems(JSON.parse(storedItems));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"cartItems\", JSON.stringify(items));\n  }, [items]);\n  const addItemToCartHandler = async item => {\n    const updatedItemsArray = [...items];\n    let url = `${api}`;\n    const existingItemIndex = updatedItemsArray.findIndex(existingItem => existingItem._id === item.id);\n    if (existingItemIndex !== -1) {\n      updatedItemsArray[existingItemIndex].amount += Number(item.amount);\n      try {\n        const itemIdToUpdate = updatedItemsArray[existingItemIndex]._id;\n        const updatedItem = {\n          name: item.name,\n          description: item.description,\n          price: item.price,\n          amount: updatedItemsArray[existingItemIndex].amount\n        };\n        await axios.put(`${url}/${itemIdToUpdate}`, updatedItem);\n        console.log(url);\n        console.log(itemIdToUpdate);\n      } catch (error) {\n        console.error(\"Error updating item:\", error);\n      }\n    } else {\n      try {\n        const res = await axios.post(url, item);\n        updatedItemsArray.push(res.data);\n      } catch (error) {\n        console.error(\"Error adding item:\", error);\n      }\n    }\n    updatedItems(updatedItemsArray);\n  };\n  const removeItemFromCartHandler = async id => {\n    const itemIndex = items.findIndex(item => item._id === id);\n    const existingItem = items[itemIndex];\n    console.log(existingItem);\n    if (itemIndex !== -1) {\n      const updatedItemsArray = [...items];\n      if (existingItem.amount > 1) {\n        updatedItemsArray[itemIndex].amount -= 1;\n        const updatedItem = {\n          name: existingItem.name,\n          description: existingItem.description,\n          price: existingItem.price,\n          amount: updatedItemsArray[itemIndex].amount\n        };\n        try {\n          const url = `${api}`;\n          await axios.put(`${url}/${id}`, updatedItem);\n          console.log(url);\n          updatedItems(updatedItemsArray);\n        } catch (error) {\n          console.error(\"Error removing item:\", error);\n        }\n      } else {\n        updatedItemsArray.splice(itemIndex, 1);\n        try {\n          const url = `${api}/${id}`;\n          await axios.delete(url);\n          console.log(url);\n          updatedItems(updatedItemsArray);\n        } catch (error) {\n          console.error(\"Error removing item:\", error);\n        }\n      }\n    }\n  };\n  const cartContext = {\n    items: items,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"R9myAQWaRlXBJ7Ll3cendcd10qw=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useContext","useEffect","useState","CartContext","axios","jsxDEV","_jsxDEV","CartProvider","props","_s","api","items","updatedItems","getItems","response","get","data","error","console","storedItems","localStorage","getItem","JSON","parse","setItem","stringify","addItemToCartHandler","item","updatedItemsArray","url","existingItemIndex","findIndex","existingItem","_id","id","amount","Number","itemIdToUpdate","updatedItem","name","description","price","put","log","res","post","push","removeItemFromCartHandler","itemIndex","splice","delete","cartContext","addItem","removeItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React/react-medicine/src/Components/store/CartProvider.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\nimport axios from \"axios\";\r\n\r\nconst CartProvider = (props) => {\r\n  const api = 'https://crudcrud.com/api/1da47b9b260445749a0d4bf75d10b6e1/cart';\r\n  const [items, updatedItems] = useState([]);\r\n  const getItems = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `${api}`\r\n      );\r\n\r\n      updatedItems(response.data);\r\n    } catch (error) {\r\n      console.error(\"Error retrieving cart items:\", error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    const storedItems = localStorage.getItem(\"cartItems\");\r\n    if (storedItems) {\r\n      updatedItems(JSON.parse(storedItems));\r\n    }\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n    localStorage.setItem(\"cartItems\", JSON.stringify(items));\r\n  }, [items]);\r\n\r\n  const addItemToCartHandler = async (item) => {\r\n    const updatedItemsArray = [...items];\r\n    let url = `${api}`;\r\n    const existingItemIndex = updatedItemsArray.findIndex(\r\n      (existingItem) => existingItem._id === item.id\r\n    );\r\n    if (existingItemIndex !== -1) {\r\n      updatedItemsArray[existingItemIndex].amount += Number(item.amount);\r\n\r\n      try {\r\n        const itemIdToUpdate = updatedItemsArray[existingItemIndex]._id;\r\n        const updatedItem = {\r\n          name: item.name,\r\n          description: item.description,\r\n          price: item.price,\r\n          amount: updatedItemsArray[existingItemIndex].amount,\r\n        };\r\n\r\n        await axios.put(`${url}/${itemIdToUpdate}`, updatedItem);\r\n        console.log(url);\r\n        console.log(itemIdToUpdate);\r\n      } catch (error) {\r\n        console.error(\"Error updating item:\", error);\r\n      }\r\n    } else {\r\n      try {\r\n        const res = await axios.post(url, item);\r\n\r\n        updatedItemsArray.push(res.data);\r\n      } catch (error) {\r\n        console.error(\"Error adding item:\", error);\r\n      }\r\n    }\r\n\r\n    updatedItems(updatedItemsArray);\r\n  };\r\n  const removeItemFromCartHandler = async (id) => {\r\n    const itemIndex = items.findIndex((item) => item._id === id);\r\n    const existingItem = items[itemIndex];\r\n    console.log(existingItem);\r\n    if (itemIndex !== -1) {\r\n      \r\n      const updatedItemsArray = [...items];\r\n\r\n      if (existingItem.amount > 1) {\r\n        updatedItemsArray[itemIndex].amount -= 1;\r\n        const updatedItem = {\r\n          name: existingItem.name,\r\n          description: existingItem.description,\r\n          price: existingItem.price,\r\n          amount: updatedItemsArray[itemIndex].amount,\r\n        };\r\n        try {\r\n          const url = `${api}`;\r\n          await axios.put(`${url}/${id}`, updatedItem);\r\n          console.log(url);\r\n\r\n          updatedItems(updatedItemsArray);\r\n        } catch (error) {\r\n          console.error(\"Error removing item:\", error);\r\n        }\r\n      } else {\r\n        updatedItemsArray.splice(itemIndex, 1);\r\n        try {\r\n          const url = `${api}/${id}`;\r\n          await axios.delete(url);\r\n          console.log(url);\r\n\r\n          updatedItems(updatedItemsArray);\r\n        } catch (error) {\r\n          console.error(\"Error removing item:\", error);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const cartContext = {\r\n    items: items,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}